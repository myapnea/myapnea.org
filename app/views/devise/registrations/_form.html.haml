= form_with model: resource, url: join_path, local: true do |form|
  - if resource.username.blank?
    - username = User.suggest_username(Time.zone.now.usec.to_s)
    - username = User.suggest_username(Time.zone.now.usec.to_s) if User.find_by(username: username).present?
    - help_text = "Great usernames are short and fun. How about #{link_to(username, "#", data: { object: "select-username", username: username}, tabindex: "-1")}?".html_safe
  = render "forms/vertical/text_field", form: form, object: resource, key: :username, id: true, placeholder: "Pick a username", help_text: help_text, autocomplete: "off", autocorrect: "off", autocapitalize: "none", spellcheck: "false"
  = render "forms/vertical/email_field", form: form, object: resource, key: :email, placeholder: "you@example.com"
  = render "forms/vertical/password_field", form: form, object: resource, key: :password, placeholder: "Create a password", autocomplete: "new-password"

  = textcaptcha_fields(form) do
    .form-group
      = form.label :textcaptcha_answer, resource.textcaptcha_question
      = form.text_field :textcaptcha_answer, value: "", class: "form-control#{" is-invalid" if resource.errors[:textcaptcha_answer].present?}", autocomplete: "off", autocorrect: "off", autocapitalize: "none", spellcheck: "false"
      = render "forms/invalid_feedback", object: resource, key: :textcaptcha_answer

  .form-group.submit-btn-container
    = form.submit "Next step", class: "btn btn-accent btn-block"
