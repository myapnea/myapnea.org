- reply_scope = reply.parent.replies.where(reply_id: reply.id)
- reply_scope = reply_scope.shadow_banned(current_user ? current_user.id : nil) unless current_user && current_user.admin?
- unless reply.deleted_or_parent_deleted? && reply_scope.count.zero? && !current_user&.admin?
  %a.anchor-top{ name: reply.anchor }
  %div{ id: "comment-#{reply.id}-container", class: [(level == 0 ? "reply-outer-container" : nil), (reply.unread?(current_user) ? "reply-unread" : "reply-read")], style: "position:relative" }
    .reply-container{ class: (level.even? ? "reply-even" : "reply-odd") }
      - if include_parent_title
        %div{ style: "margin-bottom: 10px" }
          %small
            Reply to
            = link_to reply.parent.title, reply, data: { turbolinks: false }
      .reply-inner-container
        .reply-avatar-container{ style: "#{"display:none" unless reply.display_for_user?(current_user)}" }
          .reply-avatar.text-center
            - unless reply.deleted?
              - size = 50
              - if reply.user[:photo]
                - picture_content = profile_picture_tag(reply.user, size: size, style: "height: auto;max-width:#{size + 5}px;")
              - else
                - picture_content = icon("fas", "user", class: "text-muted fa-3x", style: "width: 50px;")
              = link_to picture_content, posts_member_path(reply.user.username)
              .text-center.text-muted{ style: "font-size: 9px;margin-top:5px" }
                = pluralize(number_with_delimiter(reply.user.replies_count), "post")
              .text-center.text-muted{ style: "font-size: 9px;" }
                = link_to "bio", posts_member_path(reply.user.username), class: "link-blend-muted" if reply.user.profile_present?
        .reply-header{ data: { parent_reply_id: reply.parent_reply_id, reply_id: reply.id } }
          = render "replies/header", reply: reply, just_voted: false
        .reply-body{ style: "#{"display:none" unless reply.display_for_user?(current_user)}" }
          .reply-body-formatted{ data: { object: "reply-show", parent_reply_id: reply.parent_reply_id, reply_id: reply.id } }
            = render "replies/formatted", reply: reply
          - if reply.deleted?
            - if current_user&.admin? && reply_scope.count.zero?
              %small= link_to "delete", reply_path(reply), method: :delete, remote: true, data: { confirm: "Delete this comment?" }, class: "text-danger"
          - else
            - new_reply = reply.parent.replies.new(reply_id: reply.id)
            - parent_reply_id = new_reply.parent_reply_id
            - reply_id = (new_reply.new_record? ? "new" : new_reply.id)
            %div{ id: "write_reply_#{parent_reply_id}_#{reply_id}" }
              - if reply.parent.is_a?(Broadcast)
                - async_write_a_reply_path = async_parent_reply_path(broadcast_id: reply.parent, parent_reply_id: parent_reply_id, reply_id: reply_id)
                - method = :post
                - remote = true
              - elsif reply.parent.is_a?(Topic)
                - async_write_a_reply_path = async_parent_reply_path(topic_id: reply.parent, parent_reply_id: parent_reply_id, reply_id: reply_id)
                - method = :post
                - remote = true
                - if reply.parent.replies.first == reply
                  - method = :get
                  - remote = nil
                  - async_write_a_reply_path = page_topic_path(reply.parent, page: reply.parent.last_page(current_user), anchor: "write-a-reply")

              - unless reply.parent.auto_locked?
                %small= link_to "reply", async_write_a_reply_path, method: method, remote: remote, class: "text-muted"
              %small= link_to "link", reply, class: "text-muted", data: { turbolinks: false }
              - if current_user && reply.editable_by?(current_user)
                %small= link_to "edit", edit_reply_path(reply), remote: true, class: "text-muted"
                %small= link_to "delete", reply_path(reply), method: :delete, remote: true, data: { confirm: "Delete this comment?" }, class: "text-muted"
            %div{ id: "comment_container_#{parent_reply_id}_#{reply_id}", style: "display:none" }
          - if params[:sort_by] == "new"
            - reply_scope = reply_scope.order(created_at: :desc)
          - elsif params[:sort_by] == "best"
            - reply_scope = reply_scope.order(:created_at)
          - else
            - reply_scope = reply_scope.order(:created_at)
          - reply_scope.each do |child_reply|
            = render "replies/show", reply: child_reply, level: level + 1, include_parent_title: false
